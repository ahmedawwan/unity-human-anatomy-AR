v2.7.0
- Added IsRightToLeft bool to Slider to make it slidable from right to left
- Fixed bug where HorizontalScrollbarVisibility was used instead of VerticalScrollbarVisibility
- Fixed bug where bound fields didn't have their IsSet indicator set
- Fixed bug where loading from Resources folder didn't work
- Fixed bug where first item in list was ignored when sorting it
- Removed UICanvas.OrderInLayer which mapped to the wrong field, SortingOrder should be used instead

v2.6.0
- Added Text Mesh Pro InputField integration
- All view actions triggered by the unity event system (Click, Drag, MouseUp, etc) are now residing in the base View class and as such is available in all views
- Fixed so mouse-wheel/track pad can be used to scroll in lists
- Margins can now be specified in percentage as well as pixels
- Added LayoutExample scene demonstrating how we can adjust the layout of a region by changing Alignment, Margin and Offset
- Added ViewField<T>.ObjectValue for setting dependency fields using value of a different type, e.g. Button.Width.ObjectValue = "100%";
- Added ToggleClick view action on buttons that inject the toggle-state of the button when triggered
- Added RemappedField used if you want to change the mapping (MapTo) of a dependency view field in a derived class
- Added generic ComponentValueConverter so component fields such as RenderCamera can be specified in XUML as string which is the path/name of the game object
- Fixed bug where inherited style values (BasedOn) was added after the inherited values (potentially overwriting them)
- Fixed bug where Text Mesh Pro Label text updates its size after the text is rendered causing flickering
- Fixed so UIView.BackgroundImageOverrideSprite now works as intended and overrides the background sprite if set
- Double clicking on error messages/warnings in console now brings you to the line the error was printed

v2.5.0
- Added Text Mesh Pro integration, enabled by uncommenting a line in TextMeshProLabel.cs which replaces the Label view with the TextMeshProLabel (created for the Unity 5.4 version)
- Added field attribute ReplaceViewField, used if you want to replace one field with another
- Added class attribute ReplacesViewModel, used if you want to replace another view-model entirely
- Added class attribute ViewNameAlias, used if you want view name aliases that maps to the view-model
- Fixed bug with scene not being marked as dirty when reloading views
- On-demand loaded sprites supported
- Performance improvements in how layout changes are propagated to parents
- Added SetChildVisibility on Group which when set to True will remove flickering effect as enabled children are made visible before being positioned

v2.4.1
- Game menu example added
- Fixed various bugs with list pooling and virtualization
- Ints and floats can now be converted and bound to ElementSize fields
- Binding to generic view fields allowed by using the GenericViewField attribute
- Fixed the error 'Field X defined on type Y is not a field on the target object' by using GenericViewField

v2.4.0
- List can use virtualization (only present items visible in vgoodiewport) through the UseVirtualization bool
- Fixed UWP 8.1 compatibility issues
- Multiple list templates supported
- Optimized performance when loading and initializing views
- Added PlayingCards example that demonstrates a scrollable wrapped list using multiple templates
- Added bool AlternateItems to List and AlternateRows to DataGrid for enabling alternating row styles (alternating between "Default" and "Alternate" state)
- Fixed issue with exceptions thrown when bindings referencing destroyed objects (e.g. bindings to removed list items)
- Fixed so content in a ScrollRect can be aligned through ContentAlignment field (e.g. to the top) even if its smaller than the scroll rect size
- Scrollable list content alignment can be aligned through ScrollableContentAlignment field
- Fixed bug where UpdateRectTransform was ignored by lists and groups
- Fixed bug where changes in IsActive didn't notify parents of layout update
- Added event "ValueSet" on dependency view fields that is triggered whenever the value is set
- Fixed bug where TabPanel doesn't update selected item when tab is selected
- Fixed bug where UnitSize z-axis (uz) was ignored 
- Fixed bug where UnitSize and BaseDirectory wasn't updated immediately when changed on the view presenter
- Added IsScrollable field to DataGrid

v2.3.0
- Two more examples added: AdvancedLists and ViewSwitcher
- Embedded scroll functionality to List view activated through IsScrollable field
- Scrollable ComboBox through IsScrollable and ListHeight fields
- Added ScrollTo method to ObservableList for scrolling to items in the list
- Minimizing of redundant objects in the hierarchy, added fields to remove certain unused objects (such as list mask)
- Content in the Panel is no longer inside a Frame by default
- ShowVerticalScrollbar and ShowHorizontalScrollbar replaced by HorizontalScrollbarVisibility and VerticalScrollbarVisibility enum
- Added CanReselect field to List that allows items to be selected even if they already are selected, used by ComboBox to allow same item to be selected in the drop-down
- Fixed bugs in Slider, RadialMenu, ComboBox and Window where mouse position calculation logic not working correctly in scaled canvases
- Added UseListMask boolean to List which removes the list mask object from the hierarchy if set to False (default)
- View pooling functionality to improve performance when dynamically creating items
- The List view can be configured to use view pooling for improved performance when creating list items
- Fixed bug where views without view models didn't show up in the view presenter list
- Fixed bug where BaseDirectory is not used when bindings values propagate
- ViewSwitcher now supports reversed animations useful when you want different transitions previous->next and next->previous
- Fixed bug with view switcher not working correctly with both transition in and out animations and when switching fast
- Added DisableItemArrangement bool to List view for the option to disable default list item grouping layout
- Fixed so XSD schema for resource dictionaries are generated
- Fixed bug where buttons stayed in highlighted state when they were deactivated when pressed
- Fixed bug where static transformation method "Format" had incorrect signature
- Performance improvements in how layout changes propagates in groups and lists

v2.2.0
- Static methods can be used as transformation methods in multi bindings using the notation: $ViewType.StaticMethod(...)
- Resource dictionaries added that can be used to bind dictionary values to view fields (e.g. for localization)
- Fixed so resources can be programmatically loaded from the Resources folder during runtime
- Fixed bug where "\n" wasn't translated into newlines in Label text
- Added CanvasGroup property to View so it can be accessed externally
- Fixed so underscore _ is allowed in binding paths
- Fixed bug where using DisableInteractionScrollDelta caused performance problems when scrolling panel
- Fixed bug where IsActive always was set to True at initialization even if set to False in XUML
- Added CreateView<T> to View that can be used to create child views instead of ViewData.CreateView<T>
- Added InitializeViews method to View that can be used instead of ViewPresenter.Instance.InitializeViews
- Fixed bug where ScrollRect.CanScrollVertically mapped to the wrong field

v2.1.0
- Added selection and replace logic to ObservableList
- ListItems can be set in Disabled state through IsDisabled field
- Moved source code into /Plugins directory so framework isn't recompiled when project code changes
- Intellisense in XUML now possible through simple configuration. XSD schema can be updated by clicking a button on the view presenter
- View switcher can pass along custom data to the view switched to through the SwitchTo method and Activated view action
- Action handlers can now take any custom data as parameter
- Default state of views is now stored in serializable format and view state can be changed during compile time
- Fixed bug with programmatically loaded view XUML missing when reloading the scene
- Fixed bug where local bindings propagated in the wrong order
- Added ShowTemplateInEditor to List so template can be made visible while working with it in the editor
- Added mechanism to update bound list item data through ObservableList methods: ItemModified and ItemsModified.
- Added Activated/Deactivated view action to View that gets triggered once after view is initialized and every time the view is activated/deactivated
- Added DeselectAfterSelect and SelectOnMouseUp fields to List 
- BaseDirectory can now be specified on views (inherited by children). Default value can be set on view presenter
- Added UnitSize a user-defined scalable element size unit (postfix "ux", "uy" and "uz"). Can specified on views (inherited by children) and the default value can be set on the view presenter
- Added option on view presenter to disable automatic reloading of views when XUML changes
- Added view actions for dragging to ScrollRect and Panel
- Added DisableInteractionScrollDelta to ScrollRect so user interaction with child views can be disabled while scrolling
- Dependency fields functionality added and all views have been converted to utilize dependency fields
- Replaced AlwaysBlockRaycast with RaycastBlockMode enum and fixed bug where setting was ignored when Alpha was set to 0
- Fixed bug in tab panel were dynamically created tabs wasn't deactivated by default
- Fixed bug where list didn't notify parents of layout change when list is rebuilt

v2.0.0
- Bigger scope. The framework is no longer limited to UI. Any element in the scene can be created with the framework
- Binding to properties as well as fields
- Multi-binding through binding transformations or format strings
- New binding operators for creating local bindings, one-way bindings, and negated bindings
- More dynamic handling of value propagation and binding dependency checks
- Dynamic loading of view XUML. View XUML can be loaded during run-time
- View fields (i.e. both fields and properties) can be mapped through class attributes
- State-management. Simplified handling of views having different states. You no longer need separate fields for different states, e.g. PressedButtonColor, HighlightedButtonColor, etc. You only need one field and storing the various states is handled by the framework
- Animation between states are defined using a new StateAnimation view. Overall handling different states and animation between them requires much less code
- New ObservableList<T> class that is a generic list that can be bound to views such as the List, FlowList, DataGrid, ComboBox and TabPanel. Any changes to the list (add, remove) will be automatically propagated to the views that it's bound to
- List-views respond to changes in their data better (no longer rebuilds entire list on changes)
- TabPanel can be bound to dynamic list for dynamic tab creation
- Multiple themes in the same scene. No longer restricted to one default theme. Themes can also be specified for individual views
- AdjustToText fields on Button and ListItem - for adjusting its size to text
- Disabled button styles added to the themes
- Base directory of the framework can be changed and be put in any folder
- Events and view actions added to animation views
- The framework now provides means to access all of the unity component fields even if mappings doesn't exist
- Fixed Panel bug where breadth of scrollbars where assumed to be 20px
- Add disabled Button styles to CheckBox and RadioButton
- Added OverrideWidth and OverrideHeight fields to UIView
- Added IsVisible field that when set to false still renders the view but with alpha = 0
- Local state field can be changed on views by using the "--" notation
- Added Content view to base view that references the view that contains the contents of the view (usually the view itself unless a ContentPlaceholder is used)
- The fields Theme and Style are now inherited and applied to children that haven't set their styles
- Added Next/Previous method and ActiveView to ViewSwitcher
- ListItem size can be adjusted with AdjustToText field. If set the ListItems will adjust their width/height to the text. Useful mainly if you want to create
  horizontal lists where each item is adjusted to the length of the text
- Dynamic data is no longer removed upone clean up so dynamic data can be visible even though the scene isn't running
- IsAlive property added to View
- View actions can be disabled so even when triggered no action handlers are invoked
- More flexible binding system, we can bind to uninitialized data, example: SelectedItem on the List.
- Sprites and fonts can be loaded dynamically by using path strings provided they've been loaded once in the scene before the scene is run
- Set-fields no longer required, View.IsSet(viewpath) can be used to see if a view field has been set

v1.4.2
- MarkUX now fully compatible with iOS
- Fixed compatibility issue with IL2CPP (in TypeHelper.GetExpressionValues)
- Window IsMovable setting is no longer ignored
- Added SelectedItem/SelectedItems property to ComboBox, List, FlowList, DataGrid
- ComboBox SelectionChanged action now gets passed action-data ListSelectionActionData
- GCAlloc calls reduced by not traversing over empty dictionaries every frame in View.TriggerChangeHandlers()
- Updated ViewFieldAnimator.UpdateAnimation to use time.unscaledDeltaTime so UI works while pausing
- Added CanSlide view field to Slider that can be used to disable the user to be able to slide the slider
- Fixed so BoolValueConverter system value converter uses ToBoolean instead of ToSingle
- PreserveAspect view field added to View that maps to the corresponding field on the image component
- Added field TabItemsSpacing to TabPanel for changing spacing between tab-items
- Removed prefab path from configuration

v1.4.0
- New theme: FlatUI
- New standard view: TabPanel
- New standard view: Window
- New standard view: ComboBox
- New standard view: CheckBox
- New standard view: RadioButton
- New standard view: ChildCanvas, for adding child canvases (used to control draw sort order)
- Prefab system replaced by templates which fixed a number of issues caused by prefabs losing their connection when switching scenes and reloading views
- Fixed ExecutionEngineException caused by TypeHelper.CreateInstance on iOS.
- Fixed ReflectionTypeLoadException in occuring in some compatibility modes of Win 32 player.
- Added option on view-presenter to disable undo logic while generating UI which saves a lot of memory in the editor
- Showcase Standard Views updated to showcase new views and themes
- Showcase Standard Views now separated into separate view files to make it easier to inspect.
- Sprite asset paths can now refer to sub-sprites within the atlas using the notation: /path/to/sprite.psd:subsprite
- Added access to ViewFieldAnimator state through ViewAnimator class
- Color values can now be specified in r,g,b or r,g,b,a format: "1.0,0.4,0.2" or "1,1,1,0.5"
- Added masking to List view so list items can be masked by the list
- Fixed issue with element size changes being ignored. 
- Folder /Views added to project root and is intended for custom views not included in the MarkUX framework
- Added view-action EnabledChanged that is triggered after a view is enabled/disabled
- Changed base class of custom action-data from BaseEventData to ActionData. Renamed classes to match.
- ItemsChanged action added to FlowList and List
- Added drag actions to ClickableRegion and renamed it to InteractableRegion
- New fields added to various views which are listed below
- Added fields: ParentView, LayoutParent and LayoutParentView to View
- Added fields for RowHeight, TextOffset and HeaderTextOffset to DataGrid
- Added fields for setting column text style to DataGrid
- Added field ScrollBarBreadth to Panel
- Added field ShowItemLabel to ListItem
- Added fields for setting header text style to List and FlowList
- Added field ShowMask to Mask view
- Added fields ItemWidth and ItemHeight to List view
- Added fields TextAlignment and TextMargin to list view
- Added field IncludeContainerInContent to ContentContainer view for when you want to remove the container itself when adding content views

v1.3.0
- Full source included in the package

v1.2.0
- Added RadialMenu view
- Added DataGrid view for presenting static and dynamic data in a grid
- Added support for embedding views within the text of a Label
- Added BBCode style syntax for changing color, size and style of text within a Label
- Added HyperLink view for presenting clickable text
- Added InteractableRegion view for surfaces that responds to click events
- Animations can now be created programmatically using the ViewFieldAnimator class
- Updated standard views example scene to include the RadialMenu, HyperLink, DataGrid and Label (embedded views)
- Groups can now sort its content. It has a new view field SortDirection and all views have a new SortIndex field
- Asset made compatible with earlier version of unity. Now only requires Unity 4.6

v1.1.0
- Added configuration functionality through config-file at MarkUX/Configuration/Configuration.asset
- Added BackgroundMaterial field to views for setting background image material
- Fixed Mac bug were subfolders where ignored when processing view assets

v1.0.0
- initial Release